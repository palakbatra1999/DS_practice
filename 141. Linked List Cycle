/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode* head) {

       ListNode* slow = head;
        ListNode* fast = head;

        while (fast != NULL && fast->next != NULL) {  // Check fast first to avoid segfaults
            slow = slow->next;          // Moves 1 step
            fast = fast->next->next;    // Moves 2 steps

            if (slow == fast) {  
                return true;  // Cycle detected
            }
        }

        return false;  // No cycle found
    }
};
