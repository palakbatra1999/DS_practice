/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if (head == NULL) return NULL; // If list is empty, return NULL

        ListNode* odd = new ListNode(0);  // Dummy node for odd list
        ListNode* even = new ListNode(0); // Dummy node for even list

        ListNode* oddHead = odd;   // Pointer to track the start of odd list
        ListNode* evenHead = even; // Pointer to track the start of even list

        ListNode* curr = head; // Pointer to traverse the original list
        bool isOdd = true; // Flag to track odd/even position

        while (curr != NULL) {
            ListNode* temp = curr; // Store current node
            
            if (isOdd) {
                odd->next = temp; // Append to odd list
                odd = temp; // Move odd pointer
            } else {
                even->next = temp; // Append to even list
                even = temp; // Move even pointer
            }

            curr = curr->next; // Move to next node
            temp->next = NULL; // Break the existing link
            isOdd = !isOdd; // Toggle flag for next iteration
        }

        // Connect odd list to even list
        odd->next = evenHead->next;

        return oddHead->next; // Return the new head of the reordered list
    }
};
