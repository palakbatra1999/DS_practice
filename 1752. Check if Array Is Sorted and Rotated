**Given an array nums, return true if the array was originally sorted in non-decreasing order, then rotated some number of positions (including zero). Otherwise, return false.**

There may be duplicates in the original array.

Note: An array A rotated by x positions results in an array B of the same length such that A[i] == B[(i+x) % A.length], where % is the modulo operation.

---

**Example 1:**

**Input:** nums = [3,4,5,1,2]  
**Output:** true  
**Explanation:** [1,2,3,4,5] is the original sorted array.  
You can rotate the array by x = 3 positions to begin on the element of value 3: [3,4,5,1,2].






**Solution -> **

class Solution {
public:
    bool check(vector<int>& nums) {

        int l=nums.size();

        int count =0;

        for(int i=0;i<l-1;i++)
        {
            if(nums[i]>nums[i+1])
            count++;
        }

        if(nums[0]< nums[l-1])
        count++;

        if(count>=2)
        return false;

        return true;


        
    }
};

**Explanation** ::

if there is a vector : [3,4,5,1,2]

then two things we need to check .. 1.) it should be sorted and 2.) it should be rotated

so.. if there are more than 1 mutations of arr[i] > arr[i+1] then it means it is definately not sorted..
and if the vector looks like : [1,2,3,4,5]  sorted but arr[n-1]> arr[0]

but if the vector has already 1 mutation and still arr[n-1]> arr[0] then.. that defo means that it isn't sorted.






