class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {

        int i,j,k,l,n=nums.size();

        vector<vector<int>> vec;
        sort(nums.begin(),nums.end());

        // set<vector<int>> s;

        for(i=0;i<n-3;i++)
        {
            if(i>0 && nums[i]== nums[i-1]) continue;

            for(j=i+1;j<n-2;j++)
            {
                if(j>i+1 && nums[j]== nums[j-1]) continue;  // note that It should only skip duplicates if j is greater than i + 1, ensuring it's not the first j after i

                 k=j+1,l=n-1;

                 while(k<l)
                 { 
                     long long temp= (long long) nums[i]+nums[j]+nums[k]+nums[l];
                    if(temp == target)
                    {
                        vector<int> v;
                        v.push_back(nums[i]);
                        v.push_back(nums[j]);
                        v.push_back(nums[k]);
                        v.push_back(nums[l]);

                      vec.push_back(v);
                        //   k++;
                        // l--;

                        while(k<l && nums[l]==nums[l-1])
                        l--;
                        while(k<l && nums[k]==nums[k+1])
                        k++;

                        k++;
                        l--;

                    } else if(temp> target)
                    {
                        l--;
                    } else {
                        k++;
                    }
                 }
            }
        }
return vec;
        
    }
};
