Best approach :: using merge sort.. (Extension of count inversions.. just make sure to count reverse pairs seperately... and then merge the arrays)

class Solution {
public:

int countPairs(vector<int>& nums, int low, int mid, int high) {
    int count = 0;
    int right = mid + 1;

    for (int left = low; left <= mid; left++) {
        while (right <= high && nums[left] > 2LL * nums[right]) {
            right++;
        }
        count += (right - (mid + 1));
    }
    
    return count;
}

void merge(vector<int>& nums, int low, int mid, int high) {
    vector<int> temp;
    int left = low, right = mid + 1;

    while (left <= mid && right <= high) {
        if (nums[left] <= nums[right]) {
            temp.push_back(nums[left++]);
        } else {
            temp.push_back(nums[right++]);
        }
    }

    while (left <= mid) temp.push_back(nums[left++]);
    while (right <= high) temp.push_back(nums[right++]);

    for (int i = low; i <= high; i++) {
        nums[i] = temp[i - low];
    }
}

int mergeSort(vector<int>& nums, int low, int high) {
    if (low >= high) return 0;

    int mid = (low + high) / 2;
    int count = mergeSort(nums, low, mid) + mergeSort(nums, mid + 1, high);

    count += countPairs(nums, low, mid, high);
    merge(nums, low, mid, high);

    return count;
}

int reversePairs(vector<int>& nums) {
    return mergeSort(nums, 0, nums.size() - 1);
}
};
