//If you see a 1:
//Since the row is sorted, every element to the left of this 1 is also 1.
//So, update the answer (row index) and move left (decrease the column pointer) to check if there are even more 1â€™s in the row.
//If you see a 0:
//Move down to the next row (increase the row pointer) since no 1 can be found to the left (as they are all 0).


int rowWithMax1s(vector<vector<int>> &mat) {
        int n = mat.size();
        if(n == 0) return -1; // edge case
        int m = mat[0].size();
        
        // Start from the top-right corner
        int row = 0, col = m - 1;
        int maxRowIndex = -1;
        
        while (row < n && col >= 0) {
            if (mat[row][col] == 1) {
                // Found a 1: update answer and move left to see if more 1's exist in this row
                maxRowIndex = row;
                col--;
            } else {
                // Found a 0: move down to next row
                row++;
            }
        }
        
        return maxRowIndex;
    }
};
