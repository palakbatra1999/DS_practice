Better approach ->

--------------------------------------

#include <vector>
#include <climits>
#include <algorithm>
using namespace std;

// Using binary search to find the lower bound index for 1 in a sorted row.
// This approach is O(log m) per row, which is more efficient than scanning linearly.
int lowerBound(vector<int> arr, int n) {
    int low = 0, high = n - 1, ans = -1;
    
    while (low <= high) {
        int mid = (low + high) / 2;
        
        // If the current element is 1, record this index and look for an earlier occurrence.
        if (arr[mid] >= 1) {
            ans = mid;
            high = mid - 1; // Move left to see if there's another 1 earlier in the row.
        } else {
            // If arr[mid] is 0, then move right.
            low = mid + 1;
        }
    }
    
    return ans; // Returns -1 if no 1 is found, otherwise returns the index of the first 1.
}

// Finds the row with the maximum number of 1's using the lowerBound function.
// Each row is processed in O(log m), so overall time complexity is O(n log m).
int rowWithMax1s(vector<vector<int>> &arr) {
    int n = arr.size();
    if (n == 0) return -1; // Edge case: empty matrix.
    
    int m = arr[0].size();
    int ans = -1;
    int maxOnes = 0;
    
    // Process each row to determine the count of 1's.
    for (int i = 0; i < n; i++) {
        int idx = lowerBound(arr[i], m);
        // If 1 is found in the current row.
        if (idx != -1) {
            // Count of 1's in the row is (total columns - index of first 1).
            int ones = m - idx;
            // Update answer if current row has more 1's than the maximum found so far.
            if (ones > maxOnes) {
                maxOnes = ones;
                ans = i;
            }
        }
    }
    
    return ans; // Returns the index of the row with the maximum number of 1's.
}



--------------------------------------
BEst approach ->
//If you see a 1:
//Since the row is sorted, every element to the left of this 1 is also 1.
//So, update the answer (row index) and move left (decrease the column pointer) to check if there are even more 1â€™s in the row.
//If you see a 0:
//Move down to the next row (increase the row pointer) since no 1 can be found to the left (as they are all 0).


int rowWithMax1s(vector<vector<int>> &mat) {
        int n = mat.size();
        if(n == 0) return -1; // edge case
        int m = mat[0].size();
        
        // Start from the top-right corner
        int row = 0, col = m - 1;
        int maxRowIndex = -1;
        
        while (row < n && col >= 0) {
            if (mat[row][col] == 1) {
                // Found a 1: update answer and move left to see if more 1's exist in this row
                maxRowIndex = row;
                col--;
            } else {
                // Found a 0: move down to next row
                row++;
            }
        }
        
        return maxRowIndex;
    }
};
