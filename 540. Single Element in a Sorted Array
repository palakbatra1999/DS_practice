/*
Approach & Intuition:
- Edge Cases: Check if the first or last element is the unique one.
- Binary Search: Since pairs appear consecutively, the unique element disrupts this pattern.
- Index Parity Logic:
  - If nums[mid] == nums[mid-1]:
    - Unique element is in the left half if mid is even, else in the right half.
  - If nums[mid] == nums[mid+1]:
    - Unique element is in the right half if mid is even, else in the left half.
- Continue narrowing down until the single element is found.
*/

class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int n = nums.size();

        if (n == 1) return nums[0];

        if (nums[0] != nums[1]) return nums[0];
        if (nums[n - 1] != nums[n - 2]) return nums[n - 1];

        int low = 1, high = n - 2;

        while (low <= high) {
            int mid = (low + high) / 2;

            if (nums[mid] != nums[mid - 1] && nums[mid] != nums[mid + 1])
                return nums[mid];

            if (nums[mid] == nums[mid - 1]) {
                if (mid % 2 == 0) high = mid - 1;
                else low = mid + 1;
            } else if (nums[mid] == nums[mid + 1]) {
                if (mid % 2 == 0) low = mid + 1;
                else high = mid - 1;
            }
        }

        return -1;
    }
};
