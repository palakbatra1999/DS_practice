# 🚀 Efficiently Finding the Largest Odd Number in a String

## 📌 Problem Statement
Given a numeric string `s`, find the **largest odd-numbered** substring by removing trailing even digits.

---

## ❌ What Was Wrong with My Code?
### **Issue 1: Inefficient String Concatenation**
```cpp
str = s[i] + str;
```
- Strings in **C++ are immutable**, meaning **every concatenation creates a new copy**.
- Since we are **inserting at the beginning**, it results in **O(n²) time complexity**.
- **💣 Causes Memory Limit Exceeded (MLE) in large test cases.**

### **Issue 2: Unnecessary Boolean Flag (`flag`)**
```cpp
bool flag = false;
```
- The flag is used to start adding characters **only after finding the first odd digit**.
- **Not needed**, because we can **find the last odd digit** directly.

### **Issue 3: Unnecessary Integer Conversion**
```cpp
int temp = (int)s[i] - 48;
```
- Instead of manually converting characters, use:
  ```cpp
  if ((s[i] - '0') % 2 != 0)
  ```
- **More readable and efficient.**

---

## ✅ Optimized Approach (O(n) Time, O(1) Space)
### **Key Idea**
- **Scan the string from right to left** to find the **first odd digit**.
- **Return the substring** from `0` to that position.

### **Optimized Code**
```cpp
class Solution {
public:
    string largestOddNumber(string s) {
        int n = s.length();
        
        // Traverse from right to left to find the first odd digit
        for (int i = n - 1; i >= 0; i--) {
            if ((s[i] - '0') % 2 != 0) {  // Check if digit is odd
                return s.substr(0, i + 1);  // Return substring up to this index
            }
        }
        
        return "";  // No odd digit found
    }
};
```

---

## 🔥 Why is This Solution Better?
| Approach            | Time Complexity | Space Complexity | Why? |
|---------------------|----------------|-----------------|------|
| **Your Code (MLE)** | **O(n²)** | **O(n)** | Costly string concatenation inside a loop |
| **Optimized Code**  | **O(n)**  | **O(1)** | No extra string storage, just `substr(0, i+1)` |

---

## 🎯 Key Takeaways for Interviews
1. **Avoid Costly String Operations**
   - **String concatenation in loops (`s[i] + str`) is slow**.
   - Use **string slicing (`substr()`) instead** when possible.

2. **Scan in the Right Direction**
   - If you need to **find the rightmost occurrence**, **scan from right to left**.

3. **Use Character Math Efficiently**
   - Instead of `(int)s[i] - 48`, use `s[i] - '0'`.

4. **Think About Space Complexity**
   - If **only indices** are needed, **avoid extra string storage**.

---

## ✅ Final Interview Strategy
🔹 **Think about time complexity first**  
🔹 **Avoid unnecessary operations inside loops**  
🔹 **Optimize memory by using string slicing instead of concatenation**  
