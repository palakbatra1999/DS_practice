Overall: O(n log n) (good, but not the best)

#include <iostream>
#include <unordered_map>
#include <vector>
#include <algorithm>

using namespace std;

class Solution {
public:
    string frequencySort(string s) {
        unordered_map<char, int> freq;

        for (char c : s) {
            freq[c]++;
        }

        vector<pair<char, int>> vec(freq.begin(), freq.end());

        // Sort vector by frequency in descending order
        sort(vec.begin(), vec.end(), [](const pair<char, int>& a, const pair<char, int>& b) {
            return a.second > b.second; // Higher frequency first
        });

        // Build the result string
        string result;
        result.reserve(s.size()); // Avoids multiple reallocations

        for (auto& p : vec) {
            result.append(p.second, p.first);
        }

        return result;
    }
};
