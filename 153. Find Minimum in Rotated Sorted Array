/*
    üîç Key Idea: Finding the Minimum in a Rotated Sorted Array using Binary Search

    ‚úÖ Left Sorted Condition:
    - If nums[low] ‚â§ nums[mid], it means this part is sorted.
    - The smallest value in this part is nums[low], so we update mini.
    - Since the minimum cannot be in this sorted part, move low = mid + 1.

    ‚úÖ Right Sorted Condition:
    - If nums[mid] ‚â§ nums[high], it means the right part is sorted.
    - The smallest value in this part is nums[mid], so we update mini.
    - Since the minimum is in this sorted part, move high = mid - 1.

    ‚è≥ Time Complexity: O(log N), as we reduce the search space by half in each iteration.
*/

#include <iostream>
#include <vector>
using namespace std;

int findMin(vector<int>& nums) {
    int low = 0, high = nums.size() - 1, mini = 50001;

    while (low <= high) {
        int mid = (low + high) / 2;

        if (nums[low] <= nums[mid]) {
            mini = min(mini, nums[low]);
            low = mid + 1;
        } else if (nums[mid] <= nums[high]) {
            mini = min(mini, nums[mid]);
            high = mid - 1;
        }
    }

    return mini;
}
