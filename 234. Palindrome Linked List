/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

    // Function to reverse a linked list
    ListNode* reverse(ListNode* head) {
        if (head == NULL || head->next == NULL) return head; // Base case: empty list or single node

        ListNode* nextNode = head->next;  // Store next node
        ListNode* newHead = reverse(nextNode); // Recursively reverse the rest of the list

        head->next = NULL;  // Break the link
        nextNode->next = head; // Reverse the link
        
        return newHead;  // Return new head of reversed list
    }

    // Function to check if a linked list is a palindrome
    bool isPalindrome(ListNode* head) {
        if (head == NULL || head->next == NULL) return true; // A single-node list is always a palindrome

        // Step 1: Find the middle of the linked list using slow & fast pointers
        ListNode* slow = head;
        ListNode* fast = head;
        
        while (fast != NULL && fast->next != NULL) {
            slow = slow->next;
            fast = fast->next->next;
        }

        // Step 2: Reverse the second half of the list
        ListNode* secondHalf = reverse(slow);

        // Step 3: Compare the first half and the reversed second half
        ListNode* firstHalf = head;
        while (secondHalf != NULL) { // No need to check firstHalf as it's always longer or equal
            if (firstHalf->val != secondHalf->val)
                return false; // Mismatch found, not a palindrome
            
            firstHalf = firstHalf->next;
            secondHalf = secondHalf->next;
        }

        return true; // If all values matched, it's a palindrome
    }
};
