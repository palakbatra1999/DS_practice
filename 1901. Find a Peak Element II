#include <vector>
#include <iostream>

using namespace std;

class Solution {
public:
    vector<int> findPeakGrid(vector<vector<int>>& mat) {
        int left = 0, right = mat[0].size() - 1;

        while (left <= right) {
            int mid_col = (left + right) / 2;

            // Find the row with max element in this column
            int max_row = 0;
            for (int i = 0; i < mat.size(); i++) {
                if (mat[i][mid_col] > mat[max_row][mid_col]) {
                    max_row = i;
                }
            }

            // Get left and right neighbor values (if they exist)
            int left_val = (mid_col > 0) ? mat[max_row][mid_col - 1] : -1;
            int right_val = (mid_col < mat[0].size() - 1) ? mat[max_row][mid_col + 1] : -1;

            // Check if it's a peak
            if (mat[max_row][mid_col] > left_val && mat[max_row][mid_col] > right_val) {
                return {max_row, mid_col}; // Found a peak
            }

            // Move in the direction of the larger neighbor
            if (left_val > mat[max_row][mid_col]) {
                right = mid_col - 1;  // Move left
            } else {
                left = mid_col + 1;   // Move right
            }
        }

        return {-1, -1}; // Should never reach here
    }
};

// Example usage
int main() {
    Solution sol;
    vector<vector<int>> mat = {
        {1, 4, 3},
        {6, 5, 2},
        {7, 8, 9}
    };

    vector<int> peak = sol.findPeakGrid(mat);
    cout << "Peak found at: [" << peak[0] << ", " << peak[1] << "]" << endl;
    return 0;
}
